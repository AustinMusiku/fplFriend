<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../partials/heading')%>
</head>
<body>
    <header class="">

        <div class="landing grid">
            <div class="container">
                <div class="landing-text">
                    <h1 class="sub-heading">Get ahead of the curve with carefully curated statistics</h1>
                </div>
            </div>
        </div>
    </header>


    <section class="First light-section grid">
        
        <div class="container">
            <h1 class="section-heading" data-attribute="on fire">on fire</h1>

            <div class="section-body">
                <div class="cards">

                    
                    

                </div>
            </div>
            
        </div>
    </section>

    <section class="grid">
        <div class="container">
            <h1 class="section-heading" data-attribute="captains">captains</h1>

            <div class="section-body">
                <p class="para">The table below is arranged in from highest to lowest with the most favourable option at the top. The aggregated data takes into consideration player current form, player influence, player threat, player creativity, player's upcoming fixture difficulty rating, and points per game. The afore-mentioned fields then help us come up with an index to predict the players likely performace</p>
                <table>
                    <tr>
                        <th>Name</th>
                        <th>fix</th>
                        <th>Captaincy</th>
                    </tr>
                </table>
            </div>
        </div>
    </section>

    <section class="grid">
        <div class="container">
            <h1 class="section-heading" data-attribute="differentials">differentials</h1>
            <div class="section-body">
                <p class="para">Looking to climb up your mini-leagues? Invest in a good pair (or more, its completely upto you) of differentials. The scatter plot indicates the distribution of assets with varying levels of ownership and expected performance metrics. The further towards the right the player is indicates the more potent the player and the further up shows the less the ownership so you basically want to keep an eye on the assets on the upper right quadrant of the distribution, that indicates the least owned of the more potent players</p>
                <!-- Create a div where the graph will take place -->
                <div id="differentials-graph"></div>
            </div>
        </div>
    </section>

    <%- include('../partials/footer')%>
</body>
<%- include('../partials/scripts')%>
<script>
    let cards = document.querySelector('.cards');
    
    let initHomepage = async () => {
        try{
            let container = document.querySelector('.container');

            const players = await getAllPlayers();
            let sorted = players.sort((a,b) => (b.event_points) - (a.event_points)).slice(0, 6);
            let count = 1;

            //
            //ON FIRE PLAYERS
            //
            sorted.forEach( async (player) => {
                    let playerEvents = await getPlayerEventsById(player.id);
                    let prevVal = playerEvents.history[playerEvents.history.length-1].value/10;
                    let playerCard = `<div class="card-heading" data-pos="${count++}">
                                            <p class="caption">${evaluateTeam(player.team)}</p>
                                            <div class="card-stat1"> 
                                                <p class="mini-txt accent-font">${evaluatePosition(player.element_type)}</p>
                                            </div>
                                            <p class="mini-heading ">${player.web_name}</p>
                                        </div>
                                        <div class="card-body">
                                            <div class="card-body-top">
                                                <div class="card-stat2"> 
                                                    <p class="mini-heading">
                                                        ${player.now_cost/10}
                                                        <span class="mini-txt">m</span></p>
                                                    </p>
                                                    <div class="price-indicator ${evalutePriceChange(prevVal, (player.now_cost/10))}"></div>
                                                </div>
                                            </div>
                                            <div class="card-body-bottom">
                                                <div class="card-stat stat1">
                                                    <p class="">${player.total_points}<p class="mini-txt">Pts</p></p>
                                                </div>
                                                <div class="card-stat stat2">
                                                    <p class="mini-txt">Form</p>
                                                    <p class="caption">${player.form}</p>
                                                </div>
                                                <div class="card-stat stat3">
                                                    <p class="mini-txt">Ict</p>
                                                    <p class="caption">${player.ict_index}</p>
                                                </div>
                                                <div class="card-stat stat4">
                                                    <p class="mini-txt">Sb</p>
                                                    <p class="caption">${player.selected_by_percent}%</p>
                                                </div>
                                                
                                            </div>
                                        </div> `;

                    let card = document.createElement('div');
                    card.innerHTML = playerCard;
                    card.classList.add('card');
                    cards.appendChild(card);
            });

            //
            // CAPTAINS TABLE
            //
            let captains = players.filter(captain => captain.now_cost > 70);

            let computedCaptains = captains.map(async captain => {  
                let captainEvents = await getPlayerEventsById(captain.id);
                let history = parseInt(captain.form)*0.3 + parseInt(captain.points_per_game)*0.3 + parseInt(captain.ict_index)*0.4;
                let fdr = captainEvents.fixtures[0].difficulty;
                let index = (history*0.3 + (5 - parseInt(fdr)*0.7)).toFixed(2);

                return {
                    ...captain,
                    fdr: fdr,
                    opponent: captainEvents.fixtures[0].is_home? captainEvents.fixtures[0].team_a: captainEvents.fixtures[0].team_h,
                    captaincy: index
                }
            })

            Promise.all(computedCaptains)
                .then(captains => {
                    let sortedCaptains = captains
                        .sort((a,b) => (b.captaincy) - (a.captaincy))
                        .filter(captain => captain.chance_of_playing_next_round != 0)
                        .slice(0, 15)

                    sortedCaptains.forEach(captain => {
                        console.log(`${captain.web_name} -> ${captain.captaincy}`)
                        let rowfields = `
                            <td>${captain.web_name}</td>
                            <td class="fix-${captain.fdr} caption">${evaluateTeam(captain.opponent)}</td>
                            <td>${captain.captaincy}</td>
                        `
                        let row = document.createElement('tr');
                        row.innerHTML = rowfields;
                        document.querySelector('table').appendChild(row);
                    })
                })


            //
            //
            // DIFFERENTIALS SCATTER PLOT
            // 
            // set the dimensions and margins of the graph
            var margin = {top: 10, right: 10, bottom: 50, left: 20},
                width = container.scrollWidth - margin.left - margin.right,
                height = 500 - margin.top - margin.bottom;
            
            // append the svg object to the body of the page
            var svg = d3.select("#differentials-graph")
                .append("svg")
                    .attr("height", height + margin.top + margin.bottom)
                    .attr("width", width + margin.left + margin.right)
                .append("g")
                    .attr("transform",
                        "translate(" + margin.left + "," + margin.top + ")");

            // X label
            svg.append('text')
                .attr('text-anchor', 'middle')
                .attr('transform', 'translate('+ (width-30) +',' + (height+30) + ')')
                .style('font-family', 'Space Grotesk')
                .style('font-size', 14)
                .text('potential');
            
            // Y label
            svg.append('text')
                .attr('text-anchor', 'middle')
                .attr('transform', 'translate(0,' + height/10 + ')rotate(-90)')
                .style('font-family', 'Space Grotesk')
                .style('font-size', 14)
                .text('owership (%)');

            // compute differentials
            let differentials = players.sort((a,b) => b.now_cost - a.now_cost).filter(differential => differential.now_cost < 90 && differential.now_cost > 60 && differential.selected_by_percent < 20 && differential.minutes > 200);

            let computedDifferentials =  differentials.map(async differential => {
                let differentialEvents = await getPlayerEventsById(differential.id);

                return {
                    name: differential.web_name,
                    ownership: differential.selected_by_percent,
                    potential: (parseInt(differential.form)*0.2 + parseInt(differential.points_per_game)*0.5 + parseInt(differential.ict_index)*0.3)*0.4 + (5 - parseInt(differentialEvents.fixtures[0].difficulty)*0.6)
                }
            })
            
            //Read the data
            Promise.all(computedDifferentials)
                .then(differentials => {
                    // sort array to pick max and min potential values
                    let sortedDifferentials = differentials.sort((a,b) => b.potential - a.potential);
                    let maxPotential = Math.ceil(sortedDifferentials[0].potential);
                    let minPotential = Math.floor(sortedDifferentials[sortedDifferentials.length - 1].potential);
                    
                    // Add X axis
                    let x = d3.scaleLinear()
                                .domain([minPotential, maxPotential+0.5])
                                .range([ 0, width ]);
                                svg.append("g")
                                .attr("transform", "translate(0," + height + ")")
                                .attr('stroke', '#f4f4f4')
                                .call(d3.axisBottom(x));
                        
                    // Add Y axis
                    let y = d3.scaleLinear()
                        .domain([0, 20])
                        .range([ height, 0]);
                        svg.append("g")
                        .call(d3.axisLeft(y));

                    // Add dots
                    svg.append('g')
                        .selectAll("dot")
                        .data(differentials)
                        .enter()
                        .append("circle")
                            .attr("cx", d => x(d.potential) )
                            .attr("cy", d => y(d.ownership) )
                            .attr('data-name', d => `${d.name}`)
                            .attr("r", 2)
                            .style("fill", "#f09292")

                    // Add labels
                    svg.append("g")
                        .selectAll("text")
                        .data(differentials)
                        .enter()
                        .append("text")
                            .attr("font-family", "Space Grotesk")
                            .attr("font-size", 10)
                            .attr("dy", "0.35em")
                            .attr("x", d => x(d.potential)+7)
                            .attr("y", d => y(d.ownership))
                            .text(d => d.name);

                })

        }catch(err){
            console.error(err);
        }
    }
    
    initHomepage();
    </script>
</html>