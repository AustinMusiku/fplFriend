<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../partials/heading')%>
</head>
<body>
    <header class="">

        <div class="landing grid">
            <div class="container">
                <div class="landing-text">
                    <h1 class="sub-heading">Get ahead of the curve with carefully curated statistics</h1>
                </div>
            </div>
        </div>
    </header>

    <section class="grid">
        <div class="container">
            <h1 class="section-heading" data-attribute="sensible transfers">sensible transfers</h1>

            <div class="section-body">
                <div class="section-block">
                    <h2 class="section-block-heading">premium assets</h2>
                    <table class="premium-table"></table>
                </div>

                <div class="section-block">
                    <h2 class="section-block-heading">mid-range assets</h2>
                    <table class="mid-range-table"></table>
                </div>

                <div class="section-block">
                    <h2 class="section-block-heading">budget assets</h2>
                    <table class="budget-table"></table>
                </div>
            </div>
        </div>
    </section>

    <%- include('../partials/footer')%>
</body>
<%- include('../partials/scripts')%>
<script>
    
    let initHomepage = async () => {
        try{
            let container = document.querySelector('.container');
            let players = await getAllPlayers();
            const gw = await getGw()
            const currentGw = parseInt(gw[0].id);

            // SENSIBLE TRANSFERS
            // PREMIUM 10 < X
            let premiums = players.filter(player => player.now_cost >= 100);

            let computedPremiums = premiums.map(async player => {  
                let playerEvents = await getPlayerEventsById(player.id);
                let history = parseInt(player.form)*0.3 + parseInt(player.points_per_game)*0.7;
                let fdr1 = playerEvents.fixtures[0].difficulty;
                let fdr2 = playerEvents.fixtures[1].difficulty;
                let fdr3 = playerEvents.fixtures[2].difficulty;
                let fdr4 = playerEvents.fixtures[3].difficulty;
                let fdr5 = playerEvents.fixtures[4].difficulty;
                let fdr6 = playerEvents.fixtures[5].difficulty;
                let avgFdr = (fdr1+fdr2+fdr3+fdr4+fdr5+fdr6)/4
                let index = (history*0.3 + (5 - parseInt(avgFdr)*0.7)).toFixed(2);

                return {
                    ...player,
                    fdr1: fdr1,
                    fdr2: fdr2,
                    fdr3: fdr3,
                    fdr4: fdr4,
                    fdr5: fdr5,
                    fdr6: fdr6,
                    opponent1: playerEvents.fixtures[0].is_home? playerEvents.fixtures[0].team_a: playerEvents.fixtures[0].team_h,
                    opponent2: playerEvents.fixtures[1].is_home? playerEvents.fixtures[1].team_a: playerEvents.fixtures[1].team_h,
                    opponent3: playerEvents.fixtures[2].is_home? playerEvents.fixtures[2].team_a: playerEvents.fixtures[2].team_h,
                    opponent4: playerEvents.fixtures[3].is_home? playerEvents.fixtures[3].team_a: playerEvents.fixtures[3].team_h,
                    opponent5: playerEvents.fixtures[4].is_home? playerEvents.fixtures[4].team_a: playerEvents.fixtures[4].team_h,
                    opponent6: playerEvents.fixtures[5].is_home? playerEvents.fixtures[5].team_a: playerEvents.fixtures[5].team_h,
                    pci: index
                }
            })

            Promise.all(computedPremiums)
                .then(players => {
                    let sortedPlayers = players
                    // player.chance_of_playing_next_round != 0
                        .sort((a,b) => (b.pci) - (a.pci))
                        // .slice(0, 10)

                    let rowHeads =`
                        <th>Name</th>
                        <th>gw${currentGw+1}</th>
                        <th>gw${currentGw+2}</th>
                        <th>gw${currentGw+3}</th>
                        <th>gw${currentGw+4}</th>
                        <th>gw${currentGw+5}</th>
                        <th>gw${currentGw+6}</th>`

                        let row = document.createElement('tr');
                        row.innerHTML = rowHeads;
                        document.querySelector('.premium-table').appendChild(row);

                    sortedPlayers.forEach(player => {
                        let rowfields = `
                            <td>${player.web_name} <span class="caption">(${player.now_cost/10}m)</td>
                            <td class="fix-${player.fdr1} caption">${evaluateTeam(player.opponent1)}</td>
                            <td class="fix-${player.fdr2} caption">${evaluateTeam(player.opponent2)}</td>
                            <td class="fix-${player.fdr3} caption">${evaluateTeam(player.opponent3)}</td>
                            <td class="fix-${player.fdr4} caption">${evaluateTeam(player.opponent4)}</td>
                            <td class="fix-${player.fdr5} caption">${evaluateTeam(player.opponent5)}</td>
                            <td class="fix-${player.fdr6} caption">${evaluateTeam(player.opponent6)}</td>
                        `
                        let row = document.createElement('tr');
                        row.innerHTML = rowfields;
                        document.querySelector('.premium-table').appendChild(row);
                    })
                })
            
            // MID-RANGE 6.6 < X < 9.9
            let midRangers = players.filter(player => player.now_cost > 66 && player.now_cost < 99);

            let computedmidRange = midRangers.map(async player => {  
                let playerEvents = await getPlayerEventsById(player.id);
                let history = parseInt(player.form)*0.3 + parseInt(player.points_per_game)*0.7;
                let fdr1 = playerEvents.fixtures[0].difficulty;
                let fdr2 = playerEvents.fixtures[1].difficulty;
                let fdr3 = playerEvents.fixtures[2].difficulty;
                let fdr4 = playerEvents.fixtures[3].difficulty;
                let fdr5 = playerEvents.fixtures[4].difficulty;
                let fdr6 = playerEvents.fixtures[5].difficulty;
                let avgFdr = (fdr1+fdr2+fdr3+fdr4+fdr5+fdr6)/4
                let index = (history*0.3 + (5 - parseInt(avgFdr)*0.7)).toFixed(2);

                return {
                    ...player,
                    fdr1: fdr1,
                    fdr2: fdr2,
                    fdr3: fdr3,
                    fdr4: fdr4,
                    fdr5: fdr5,
                    fdr6: fdr6,
                    opponent1: playerEvents.fixtures[0].is_home? playerEvents.fixtures[0].team_a: playerEvents.fixtures[0].team_h,
                    opponent2: playerEvents.fixtures[1].is_home? playerEvents.fixtures[1].team_a: playerEvents.fixtures[1].team_h,
                    opponent3: playerEvents.fixtures[2].is_home? playerEvents.fixtures[2].team_a: playerEvents.fixtures[2].team_h,
                    opponent4: playerEvents.fixtures[3].is_home? playerEvents.fixtures[3].team_a: playerEvents.fixtures[3].team_h,
                    opponent5: playerEvents.fixtures[4].is_home? playerEvents.fixtures[4].team_a: playerEvents.fixtures[4].team_h,
                    opponent6: playerEvents.fixtures[5].is_home? playerEvents.fixtures[5].team_a: playerEvents.fixtures[5].team_h,
                    pci: index
                }
            })

            Promise.all(computedmidRange)
                .then(players => {
                    let sortedPlayers = players
                    // player.chance_of_playing_next_round != 0
                        .sort((a,b) => (b.pci) - (a.pci))
                        .slice(0, 10)

                    let rowHeads =`
                        <th>Name</th>
                        <th>gw${currentGw+1}</th>
                        <th>gw${currentGw+2}</th>
                        <th>gw${currentGw+3}</th>
                        <th>gw${currentGw+4}</th>
                        <th>gw${currentGw+5}</th>
                        <th>gw${currentGw+6}</th>`

                        let row = document.createElement('tr');
                        row.innerHTML = rowHeads;
                        document.querySelector('.mid-range-table').appendChild(row);

                    sortedPlayers.forEach(player => {
                        let rowfields = `
                        <td>${player.web_name} <span class="caption">(${player.now_cost/10}m)</td>
                            <td class="fix-${player.fdr1} caption">${evaluateTeam(player.opponent1)}</td>
                            <td class="fix-${player.fdr2} caption">${evaluateTeam(player.opponent2)}</td>
                            <td class="fix-${player.fdr3} caption">${evaluateTeam(player.opponent3)}</td>
                            <td class="fix-${player.fdr4} caption">${evaluateTeam(player.opponent4)}</td>
                            <td class="fix-${player.fdr5} caption">${evaluateTeam(player.opponent5)}</td>
                            <td class="fix-${player.fdr6} caption">${evaluateTeam(player.opponent6)}</td>
                        `
                        let row = document.createElement('tr');
                        row.innerHTML = rowfields;
                        document.querySelector('.mid-range-table').appendChild(row);
                    })
                })

            // BUDGET 0 < X < 6.5
            let budgets = players
                .filter(player => player.now_cost < 66)
                .sort((a,b) => b.ict_index - a.ict_index)
                .slice(0, 30)

            let computedBudgets = budgets.map(async player => {  
                let playerEvents = await getPlayerEventsById(player.id);
                let history = parseInt(player.form)*0.3 + parseInt(player.points_per_game)*0.7;
                let fdr1 = playerEvents.fixtures[0].difficulty;
                let fdr2 = playerEvents.fixtures[1].difficulty;
                let fdr3 = playerEvents.fixtures[2].difficulty;
                let fdr4 = playerEvents.fixtures[3].difficulty;
                let fdr5 = playerEvents.fixtures[4].difficulty;
                let fdr6 = playerEvents.fixtures[5].difficulty;
                let avgFdr = (fdr1+fdr2+fdr3+fdr4+fdr5+fdr6)/4
                let index = (history*0.3 + (5 - parseInt(avgFdr)*0.7)).toFixed(2);

                return {
                    ...player,
                    fdr1: fdr1,
                    fdr2: fdr2,
                    fdr3: fdr3,
                    fdr4: fdr4,
                    fdr5: fdr5,
                    fdr6: fdr6,
                    opponent1: playerEvents.fixtures[0].is_home? playerEvents.fixtures[0].team_a: playerEvents.fixtures[0].team_h,
                    opponent2: playerEvents.fixtures[1].is_home? playerEvents.fixtures[1].team_a: playerEvents.fixtures[1].team_h,
                    opponent3: playerEvents.fixtures[2].is_home? playerEvents.fixtures[2].team_a: playerEvents.fixtures[2].team_h,
                    opponent4: playerEvents.fixtures[3].is_home? playerEvents.fixtures[3].team_a: playerEvents.fixtures[3].team_h,
                    opponent5: playerEvents.fixtures[4].is_home? playerEvents.fixtures[4].team_a: playerEvents.fixtures[4].team_h,
                    opponent6: playerEvents.fixtures[5].is_home? playerEvents.fixtures[5].team_a: playerEvents.fixtures[5].team_h,
                    pci: index
                }
            })

            Promise.all(computedBudgets)
                .then(players => {
                    let sortedPlayers = players
                    // player.chance_of_playing_next_round != 0
                        .sort((a,b) => (b.pci) - (a.pci))
                        .slice(0, 10)

                    let rowHeads =`
                        <th>Name</th>
                        <th>gw${currentGw+1}</th>
                        <th>gw${currentGw+2}</th>
                        <th>gw${currentGw+3}</th>
                        <th>gw${currentGw+4}</th>
                        <th>gw${currentGw+5}</th>
                        <th>gw${currentGw+6}</th>`

                        let row = document.createElement('tr');
                        row.innerHTML = rowHeads;
                        document.querySelector('.budget-table').appendChild(row);

                    sortedPlayers.forEach(player => {
                        let rowfields = `
                            <td>${player.web_name} <span class="caption mini-txt">(${player.now_cost/10}m)</td>
                            <td class="fix-${player.fdr1} caption">${evaluateTeam(player.opponent1)}</td>
                            <td class="fix-${player.fdr2} caption">${evaluateTeam(player.opponent2)}</td>
                            <td class="fix-${player.fdr3} caption">${evaluateTeam(player.opponent3)}</td>
                            <td class="fix-${player.fdr4} caption">${evaluateTeam(player.opponent4)}</td>
                            <td class="fix-${player.fdr5} caption">${evaluateTeam(player.opponent5)}</td>
                            <td class="fix-${player.fdr6} caption">${evaluateTeam(player.opponent6)}</td>
                        `
                        let row = document.createElement('tr');
                        row.innerHTML = rowfields;
                        document.querySelector('.budget-table').appendChild(row);
                    })
                })
            
            }catch(err){
                console.log(err);
            }
    }
    initHomepage();
    </script>
</html>